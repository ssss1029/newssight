#!/usr/bin/env node

/**
 * Setting up process.env stuff
 */
try {
  var addons = require("../addons-process-env");
  for (var item in addons) {
    process.env[item] = addons[item];
  }
} catch (e) {
  if (e) {
    console.log("Hey there, it looks like youre missing an essential addon file. See the readme.");
  }
}

/**
 * Initialize database
 */
console.log("Setting up Database");
var setupDb = require("../server/database-conns/db-setup").setupDb;
var setupResult = setupDb({
  SQLScriptLocation : '/scripts/mysql/CLEAR_AND_CREATE_DATABASE.sql' 
});
console.log(setupResult);

/**
 * Setup other global variables
 */
var addons_global = require("../addons-global");
for (var item in addons_global) {
  global[item] = addons_global[item];
}


/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('newssight:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
